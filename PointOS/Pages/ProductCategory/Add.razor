
@inject ISnackbar Snackbar
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText>Product Category Form</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="12">
                <MudTextField @bind-Value="FirstName" Label="Name" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudText>
                    <b>Status</b>
                </MudText>
                <MudText Typo="Typo.body2">
                    Set the Status of the Product Category to Active/Inactive.
                </MudText>
                <MudSwitch @bind-Checked="@FriendSwitch" Color="Color.Secondary" />
            </MudItem>
        </MudGrid>
    </MudCardContent>

    <MudCardActions Class="pb-4 pl-4">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Class="ml-auto"
                   @onclick="() => Confirm()">Save Changes</MudButton>
    </MudCardActions>
</MudCard>
<Dialog OnClickEventCallback="ConfirmButtonClicked"></Dialog>

@inject IDialogService DialogService
@code{

    public string FirstName { get; set; }
    public bool FriendSwitch { get; set; } = true;

    public string Message { get; set; }

    private void OpenDialog(DialogOptions options)
    {
        DialogService.Show<Dialog>("Confirm", options);
        Message = "Are you sure you want add Thinkpad X1 Nano as a Product?";
    }

    void SaveChanges(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = false;
        });
    }

    public void ConfirmButtonClicked(MouseEventArgs e)
    {
        Snackbar.Add("Event Handler raised", Severity.Info, config =>
        {
            config.ShowCloseIcon = false;
        });
    }


    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    DialogOptions closeButton = new DialogOptions() { CloseButton = true/*, MaxWidth = MaxWidth.Small, FullWidth = true*/ };
    DialogOptions noHeader = new DialogOptions() { NoHeader = true };
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };
    DialogOptions fullScreen = new DialogOptions() { FullScreen = true, CloseButton = true };


    private void DeleteUser()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<Dialog>("Delete", parameters, options);
    }

    private void Confirm()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to remove thisguy@emailz.com from this account?");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<Dialog>("Confirm", parameters, options);
    }

    private void Download()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Your computer seems very slow, click the download button to download free RAM.");
        parameters.Add("ButtonText", "Download");
        parameters.Add("Color", Color.Info);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<Dialog>("Slow Computer Detected", parameters, options);
    }

}